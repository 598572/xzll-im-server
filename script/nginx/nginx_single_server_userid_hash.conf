# IM系统 - 单服务器一致性哈希配置
# 当前配置：只有一个im-connect服务器，但保留一致性哈希以便将来扩展
user root;
worker_processes auto;
error_log /home/hzz/nginx/logs/error.log;
pid /home/hzz/nginx/logs/nginx.pid;

# 事件模块 - IM场景优化
events {
    worker_connections 8192;      # IM系统需要支持大量长连接
    use epoll;                    # Linux下使用epoll，高效处理大量连接
    multi_accept on;              # 一次接受多个连接，提升性能
    accept_mutex off;             # 关闭互斥锁，避免惊群问题
}

# HTTP 模块
http {
    # 基础配置
    include /home/hzz/nginx/conf/mime.types;
    default_type application/octet-stream;
    
    # 日志格式 - 增强版，增加upstream和userId信息便于调试
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream_addr="$upstream_addr" '
                    'upstream_status="$upstream_status" '
                    'request_time=$request_time '
                    'userId="$arg_userId"';
    
    # IM场景性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;               # 对IM实时性很重要，禁用Nagle算法
    keepalive_timeout 300;        # IM场景延长keepalive时间到5分钟
    keepalive_requests 10000;     # 增加单个连接可处理的请求数
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # IM场景特殊优化
    proxy_connect_timeout 10s;    # 代理连接超时
    proxy_send_timeout 300s;      # 代理发送超时，适应IM长连接
    proxy_read_timeout 300s;      # 代理读取超时，适应IM长连接
    send_timeout 300s;            # 发送超时
    
    # Gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # ==================== 上游服务器组定义 ====================
    
    # 网关服务器组 - 处理HTTP API请求
    upstream im_gateway_backend {
        # 网关服务器地址 - 8081端口
        server 192.168.1.150:8081;
        # 未来可以添加更多网关实例：
        # server 192.168.1.151:8081;
        # server 192.168.1.152:8081;
        
        # 网关连接池优化
        keepalive 32;                     # 网关连接池
        keepalive_requests 1000;          # 网关请求数限制
        keepalive_timeout 60s;            # 网关连接超时
    }
    
    # 【重点】im-connect WebSocket服务器组 - 单服务器一致性哈希
    upstream im_server_backend {
        # 🎯 当前只有一个im-connect实例
        server 192.168.1.150:10001 weight=1 max_fails=3 fail_timeout=30s;
        
        # 📈 未来扩展时取消注释以下配置：
        # server 192.168.1.151:10001 weight=1 max_fails=3 fail_timeout=30s;
        # server 192.168.1.152:10001 weight=1 max_fails=3 fail_timeout=30s;
        # server 192.168.1.153:10001 weight=1 max_fails=3 fail_timeout=30s;
        
        # 【关键配置】基于userId参数的一致性哈希
        # 即使只有一个服务器，也保留此配置，便于将来水平扩展
        # 当WebSocket连接时，URL格式为: ws://domain/websocket?userId=123456
        hash $arg_userId consistent;
        
        # 单服务器场景连接池优化
        keepalive 64;                     # 单服务器适中的连接池大小
        keepalive_requests 10000;         # 单个keepalive连接处理更多请求
        keepalive_timeout 300s;           # keepalive连接超时时间
    }

    # 服务器配置
    server {
        listen 80;
        server_name 120.46.85.43;  # 你的公网 IP
        
        # 日志配置
        access_log /home/hzz/nginx/logs/im_access.log main;
        error_log  /home/hzz/nginx/logs/im_error.log;

        # ==================== HTTP API接口代理到网关 ====================
        
        # 认证服务接口代理
        location /im-auth/ {
            proxy_pass http://im_gateway_backend/im-auth/;
            
            # 基础代理头设置
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # HTTP/1.1 支持
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # 超时配置
            proxy_connect_timeout 30s;
            proxy_read_timeout 60s;
            proxy_send_timeout 60s;
            
            # 缓冲配置
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # 错误处理
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }
        
        # 业务服务接口代理
        location /im-business/ {
            proxy_pass http://im_gateway_backend/im-business/;
            
            # 基础代理头设置
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # HTTP/1.1 支持
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # 超时配置
            proxy_connect_timeout 30s;
            proxy_read_timeout 60s;
            proxy_send_timeout 60s;
            
            # 缓冲配置
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # 错误处理
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }

        # ==================== 【核心】WebSocket长连接代理 - userId一致性哈希 ====================
        
        # WebSocket 长连接路由 - 基于userId哈希（单服务器配置）
        location /websocket {
            # 【重要】检查userId参数是否存在
            if ($arg_userId = "") {
                return 400 "userId parameter is required";
            }
            
            # 反向代理到im-connect服务器（当前只有一台，但保留一致性哈希）
            proxy_pass http://im_server_backend;
            
            # WebSocket 协议升级配置
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # 基础头部设置
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 【重要】传递userId和连接信息给后端服务
            proxy_set_header X-User-ID $arg_userId;
            proxy_set_header X-Nginx-Proxy true;
            proxy_set_header X-Connection-Start $msec;  # 连接建立时间，用于监控
            
            # IM长连接超时配置
            proxy_read_timeout 86400s;    # 24小时读取超时，适应IM长连接特性
            proxy_send_timeout 86400s;    # 24小时发送超时
            proxy_connect_timeout 30s;    # 连接超时缩短到30秒，快速失败
            
            # IM实时通信缓冲区配置
            proxy_buffering off;         # 关闭缓冲，确保消息实时性
            proxy_request_buffering off; # 关闭请求缓冲
            
            # 单服务器场景错误处理
            # proxy_next_upstream off;   # 单服务器时可以禁用，也可以保留用于健康检查
        }
        
        # ==================== 健康检查和静态资源 ====================
        
        # im-connect健康检查接口
        location /health {
            proxy_pass http://im_server_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # 健康检查超时设置
            proxy_connect_timeout 5s;
            proxy_read_timeout 5s;
            proxy_send_timeout 5s;
        }
        
        # 网关健康检查
        location /gateway/health {
            proxy_pass http://im_gateway_backend/actuator/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # 健康检查超时设置
            proxy_connect_timeout 5s;
            proxy_read_timeout 5s;
            proxy_send_timeout 5s;
        }
        
        # 静态文件服务（如果需要）
        location /static/ {
            alias /home/hzz/nginx/html/static/;
            expires 30d;
            add_header Cache-Control "public, immutable";
        }
        
        # 默认页面
        location / {
            root /home/hzz/nginx/html;
            index index.html index.htm;
        }
    }
    
    # ==================== 【IM系统监控】nginx状态监控 ====================
    
    # nginx状态监控 - 重要：用于监控IM连接数
    server {
        listen 8080;
        server_name localhost;
        
        # nginx基础状态（注释掉，因为nginx未编译stub_status模块）
        # location /nginx_status {
        #     stub_status on;
        #     access_log off;
        #     allow 127.0.0.1;
        #     allow 192.168.1.0/24;  # 允许内网访问
        #     deny all;
        # }
        
        # 自定义IM连接统计（简单版本）
        location /im_status {
            access_log off;
            allow 127.0.0.1;
            allow 192.168.1.0/24;
            deny all;
            
            # 返回简单的状态信息
            return 200 "IM Server Status: Single Server Mode\nIM Server: 192.168.1.150:10001\nConsistent Hash: Enabled (userId-based)\nNote: nginx_status disabled (module not available)\n";
            add_header Content-Type text/plain;
        }
        
        # 健康检查端点
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # 服务器状态页面（方便查看）
        location /server_info {
            access_log off;
            allow 127.0.0.1;
            allow 192.168.1.0/24;
            deny all;
            
            return 200 "IM System Configuration:\n- Mode: Single Server with Consistent Hashing\n- IM Server: 192.168.1.150:10001\n- Gateway: 192.168.1.150:8081\n- Hash Method: userId-based consistent hashing\n- Ready for horizontal scaling\n";
            add_header Content-Type text/plain;
        }
    }
}
